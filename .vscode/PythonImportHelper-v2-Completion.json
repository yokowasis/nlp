[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "WithJsonSchema",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "encode",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "summarize",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "translate",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "VectorizeBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class VectorizeBody(BaseModel):\n    text: str\n@app.post(\n    \"/api/vectorize\",\n    description=\"This endpoint takes a text as input and returns a vectorized representation of it. The Vector size is 1024.\", name=\"Text to Vector\",\n    response_model=List[float],\n)\nasync def api_vectorize(inputs: VectorizeBody = Body(..., example={\"text\": \"Hello, world!\"})):\n    vec = encode(inputs.text)\n    return JSONResponse(content=json.loads(vec))",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "SummarizeBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class SummarizeBody(BaseModel):\n    text: str\n@app.post(\"/api/summarize\", name=\"Summarize Text\", description=\"This endpoint takes a text as input and returns a summary of it.\")\nasync def api_summarize(inputs: SummarizeBody):\n    summary = summarize(inputs.text)\n    return JSONResponse(content=summary)\nclass TranslateBody(BaseModel):\n    text: str\n    target_language: str\n@app.post(\"/api/translate\", name=\"Translate Text\", description=\"This endpoint takes a text as input and returns a translated text in the specified language.\")",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "TranslateBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class TranslateBody(BaseModel):\n    text: str\n    target_language: str\n@app.post(\"/api/translate\", name=\"Translate Text\", description=\"This endpoint takes a text as input and returns a translated text in the specified language.\")\nasync def api_translate(inputs: TranslateBody):\n    lang = inputs.target_language\n    translation = translate(inputs.text, lang=lang)\n    return JSONResponse(content=translation)\n@app.get(\"/\")\nasync def get_index():",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "app = FastAPI()\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Connection parameters",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "conn_params = {\n    'dbname': os.getenv('DB_NAME'),\n    'user': os.getenv('DB_USER'),\n    'password': os.getenv('DB_PASSWORD'),\n    'host': os.getenv('DB_HOST'),\n    'port': os.getenv('DB_PORT') or 5422\n}\ntry:\n    # Trycatch Connect to the PostgreSQL server\n    conn = psycopg2.connect(**conn_params)",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "data = {\n    \"hello\": \"world\",\n    \"man\": [\n        \"aaa\", \"bbb\", \"ccc\"\n    ]\n}\nclass VectorizeBody(BaseModel):\n    text: str\n@app.post(\n    \"/api/vectorize\",",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )\n    return (completion.choices[0].message.content)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "summarize",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def summarize(s: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a summarizer that summarize the text. \\\n                Limit to under 200 words.\"},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "arrayToString",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def arrayToString(array):\n    s = \"[\"\n    for i in range(len(array)):\n        s += str(array[i]) + \",\"\n    s = s[:-1] + \"]\"\n    return s\ndef stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "stringToArray",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")\n    v1 = [float(i) for i in s]\n    return v1\ndef encode(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def encode(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "cosineSimilarity",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "model = SentenceTransformer(\"WhereIsAI/UAE-Large-V1\")\nopenaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "openaimodel",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "openaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "client = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )",
        "detail": "fn",
        "documentation": {}
    }
]