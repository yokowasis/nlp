[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "WithJsonSchema",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "encode",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "summarize",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "translate",
        "importPath": "fn",
        "description": "fn",
        "isExtraImport": true,
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "backend",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "backend",
        "description": "backend",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "waitress",
        "description": "waitress",
        "isExtraImport": true,
        "detail": "waitress",
        "documentation": {}
    },
    {
        "label": "VectorizeBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class VectorizeBody(BaseModel):\n    text: str\n@app.post(\n    \"/api/vectorize\",\n    description=\"This endpoint takes a text as input and returns a vectorized representation of it. The Vector size is 1024.\", name=\"Text to Vector\",\n    response_model=List[float],\n)\nasync def api_vectorize(inputs: VectorizeBody = Body(..., example={\"text\": \"Hello, world!\"})):\n    vec = encode(inputs.text)\n    return JSONResponse(content=json.loads(vec))",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "SummarizeBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class SummarizeBody(BaseModel):\n    text: str\n@app.post(\"/api/summarize\", name=\"Summarize Text\", description=\"This endpoint takes a text as input and returns a summary of it.\")\nasync def api_summarize(inputs: SummarizeBody):\n    summary = summarize(inputs.text)\n    return JSONResponse(content=summary)\nclass TranslateBody(BaseModel):\n    text: str\n    target_language: str\n@app.post(\"/api/translate\", name=\"Translate Text\", description=\"This endpoint takes a text as input and returns a translated text in the specified language.\")",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "TranslateBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class TranslateBody(BaseModel):\n    text: str\n    target_language: str\n@app.post(\"/api/translate\", name=\"Translate Text\", description=\"This endpoint takes a text as input and returns a translated text in the specified language.\")\nasync def api_translate(inputs: TranslateBody):\n    lang = inputs.target_language\n    translation = translate(inputs.text, lang=lang)\n    return JSONResponse(content=translation)\nclass SemanticBody(BaseModel):\n    text: str",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "SemanticBody",
        "kind": 6,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "class SemanticBody(BaseModel):\n    text: str\n    table: str\n    retrieved_columns: str\n    target_column: str\n    limit: int\n@app.post(\"/api/semantic-search\", name=\"Semantic Search\", description=\"This endpoint takes a text as input and returns a list of rows from a table that match the text. The retrieved columns are the columns that you want to retrieve from the table separated by comma. The target column is the column in the database that has the type of `vector`.\")\nasync def api_semantic_search(inputs: SemanticBody):\n    text = inputs.text\n    embedding = encode(text)",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "query",
        "kind": 2,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "def query(sql):\n    try:\n        # Execute a query\n        cursor.execute(sql)\n        records = cursor.fetchall()\n        return records\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        raise HTTPException(status_code=500, detail=\"Database query error\")\napp = FastAPI()",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "conn_params",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "conn_params = {\n    'dbname': os.getenv('DB_NAME'),\n    'user': os.getenv('DB_USER'),\n    'password': os.getenv('DB_PASSWORD'),\n    'host': os.getenv('DB_HOST'),\n    'port': os.getenv('DB_PORT') or 5422\n}\n# Connect to the PostgreSQL server\nconn = psycopg2.connect(**conn_params)\ncursor = conn.cursor()",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "conn = psycopg2.connect(**conn_params)\ncursor = conn.cursor()\ndef query(sql):\n    try:\n        # Execute a query\n        cursor.execute(sql)\n        records = cursor.fetchall()\n        return records\n    except Exception as e:\n        print(f\"An error occurred: {e}\")",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "cursor = conn.cursor()\ndef query(sql):\n    try:\n        # Execute a query\n        cursor.execute(sql)\n        records = cursor.fetchall()\n        return records\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        raise HTTPException(status_code=500, detail=\"Database query error\")",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "app = FastAPI()\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n# Sample data",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "backend",
        "description": "backend",
        "peekOfCode": "data = {\n    \"hello\": \"world\",\n    \"man\": [\n        \"aaa\", \"bbb\", \"ccc\"\n    ]\n}\nclass VectorizeBody(BaseModel):\n    text: str\n@app.post(\n    \"/api/vectorize\",",
        "detail": "backend",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )\n    return (completion.choices[0].message.content)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "summarize",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def summarize(s: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a summarizer that summarize the text. \\\n                Limit to under 200 words.\"},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "arrayToString",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def arrayToString(array):\n    s = \"[\"\n    for i in range(len(array)):\n        s += str(array[i]) + \",\"\n    s = s[:-1] + \"]\"\n    return s\ndef stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "stringToArray",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def stringToArray(s):\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.split(\",\")\n    v1 = [float(i) for i in s]\n    return v1\ndef encode(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def encode(sentence: str):\n    return arrayToString(model.encode(sentence))\ndef cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "cosineSimilarity",
        "kind": 2,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "def cosineSimilarity(vec1, vec2):\n    return torch.nn.functional.cosine_similarity(vec1, vec2)",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "model = SentenceTransformer(\"WhereIsAI/UAE-Large-V1\")\nopenaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "openaimodel",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "openaimodel = os.getenv('OPENAI_MODEL') or \"gpt-4o-mini\"\nclient = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "fn",
        "description": "fn",
        "peekOfCode": "client = OpenAI(api_key=os.getenv('OPENAI_KEY'))\ndef translate(s: str, lang: str):\n    completion = client.chat.completions.create(\n        model=openaimodel,\n        messages=[\n            {\"role\": \"system\",\n                \"content\": \"you are a translator that translate input to \" + lang},\n            {\"role\": \"user\", \"content\": s}\n        ]\n    )",
        "detail": "fn",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"Hello\": \"World\"}\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "read_item",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}",
        "detail": "main",
        "documentation": {}
    }
]